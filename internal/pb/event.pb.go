// Code generated by protoc-gen-go.
// source: event.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	event.proto

It has these top-level messages:
	Event
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	// Unique ID of the event.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The event type.
	Type string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// An optional event ID that is the cause of this event.
	Cause string `protobuf:"bytes,5,opt,name=cause" json:"cause,omitempty"`
	// The client that produced this event.
	Client string `protobuf:"bytes,6,opt,name=client" json:"client,omitempty"`
	// Schema is the name of the schema of the encoded data.
	// This will likely be a name and optionally a version suffix.
	Schema string `protobuf:"bytes,4,opt,name=schema" json:"schema,omitempty"`
	// Encoding of the event data.
	Encoding string `protobuf:"bytes,8,opt,name=encoding" json:"encoding,omitempty"`
	// Encoded event data.
	Data []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	// Arbitrary metadata as a set of key-value pairs. This can be used
	// for adding upstream user/client info, authorization tokens, etc.
	Meta map[string]string `protobuf:"bytes,10,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Event) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

func (m *Event) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *Event) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Event) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *Event) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Event) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "pb.Event")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0x15, 0xe7, 0x83, 0xf6, 0x8a, 0x10, 0x3a, 0x10, 0x3a, 0x75, 0x8a, 0x58, 0xc8, 0x94,
	0x01, 0x06, 0x10, 0x7b, 0x47, 0x96, 0xfc, 0x03, 0x27, 0x39, 0x81, 0x45, 0xeb, 0x58, 0xed, 0xb5,
	0x52, 0x66, 0xfe, 0x38, 0xf2, 0xb9, 0xca, 0xf6, 0x3e, 0x8f, 0x2d, 0xdd, 0x7b, 0x07, 0x1b, 0xbe,
	0xb0, 0x97, 0x36, 0x1c, 0x27, 0x99, 0xd0, 0x84, 0xfe, 0xf9, 0xcf, 0x40, 0xb9, 0x8b, 0x0e, 0xef,
	0xc0, 0xb8, 0x91, 0xb2, 0x3a, 0x6b, 0xd6, 0x9d, 0x71, 0x23, 0x22, 0x14, 0x32, 0x07, 0xa6, 0x5c,
	0x8d, 0x66, 0x7c, 0x84, 0x72, 0xb0, 0xe7, 0x13, 0x53, 0xa9, 0x32, 0x01, 0x3e, 0x41, 0x35, 0xec,
	0x1d, 0x7b, 0xa1, 0x4a, 0xf5, 0x95, 0xa2, 0x3f, 0x0d, 0x3f, 0x7c, 0xb0, 0x54, 0x24, 0x9f, 0x08,
	0xb7, 0xb0, 0x62, 0x3f, 0x4c, 0xa3, 0xf3, 0xdf, 0xb4, 0xd2, 0x97, 0x85, 0xe3, 0xd4, 0xd1, 0x8a,
	0xa5, 0x9b, 0x3a, 0x6b, 0x6e, 0x3b, 0xcd, 0xf8, 0x02, 0xc5, 0x81, 0xc5, 0x12, 0xd4, 0x79, 0xb3,
	0x79, 0x7d, 0x68, 0x43, 0xdf, 0x6a, 0xe5, 0xf6, 0x8b, 0xc5, 0xee, 0xbc, 0x1c, 0xe7, 0x4e, 0x3f,
	0x6c, 0xdf, 0x61, 0xbd, 0x28, 0xbc, 0x87, 0xfc, 0x97, 0xe7, 0xeb, 0x42, 0x31, 0xc6, 0xf6, 0x17,
	0xbb, 0x3f, 0x33, 0x99, 0xd4, 0x5e, 0xe1, 0xd3, 0x7c, 0x64, 0x7d, 0xa5, 0x07, 0x79, 0xfb, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0x5b, 0x7a, 0x6d, 0xbb, 0x1f, 0x01, 0x00, 0x00,
}
